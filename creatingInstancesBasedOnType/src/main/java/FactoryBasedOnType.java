import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationTargetException;
import java.util.HashMap;
import java.util.IdentityHashMap;

/*
 * This Java source file was generated by the Gradle 'init' task.
 */
public class FactoryBasedOnType <Clazz, Type> {
    private final Class<? extends Clazz> defaultClass;
    private HashMap<String, Class<? extends Clazz>> type2clazz;

    private Class<? extends Clazz> getClassForType(Type type) {
        return type2clazz.getOrDefault(type, defaultClass);
    }

    public FactoryBasedOnType(Class<? extends Clazz> defaultClass) {
        this.defaultClass = defaultClass;
        this.type2clazz = new HashMap<>();
    }

    public void map(String type, Class<? extends Clazz> clazz) {
        this.type2clazz.put(type, clazz);
    }

    public Clazz createType(Type type) throws IllegalAccessException, InstantiationException {
        Class<? extends Clazz> theClass = getClassForType(type);
        return theClass.newInstance();
    }

    public Clazz createType(
        Type type,
        Object arg1
    ) throws NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException {
        Constructor<? extends Clazz> c = getClassForType(type).getConstructor(
            arg1.getClass()
        );
        return c.newInstance(arg1);
    }

    public Clazz createType(
            Type type,
            Object arg1,
            Object arg2
    ) throws NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException {
        Constructor<? extends Clazz> c = getClassForType(type).getConstructor(
                arg1.getClass(),
                arg2.getClass()
        );
        return c.newInstance(arg1, arg2);
    }

    public Clazz createType(
            Type type,
            Object arg1,
            Object arg2,
            Object arg3
    ) throws NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException {
        Constructor<? extends Clazz> c = getClassForType(type).getConstructor(
                arg1.getClass(),
                arg2.getClass(),
                arg3.getClass()
        );
        return c.newInstance(arg1, arg2, arg3);
    }
}
